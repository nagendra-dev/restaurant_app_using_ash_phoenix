defmodule RestaurantMaintenance.Repo.Migrations.AddResturantMaintenanceTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:restaurants, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :location, :text
    end

    create table(:maintenance_requests, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :description, :text, null: false
      add :status, :text, default: "pending"
      add :equipment_id, :uuid
    end

    create table(:equipment, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:maintenance_requests) do
      modify :equipment_id,
             references(:equipment,
               column: :id,
               name: "maintenance_requests_equipment_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:equipment) do
      add :name, :text, null: false
      add :equipment_type, :text

      add :restaurant_id,
          references(:restaurants,
            column: :id,
            name: "equipment_restaurant_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:equipment, "equipment_restaurant_id_fkey")

    alter table(:equipment) do
      remove :restaurant_id
      remove :equipment_type
      remove :name
    end

    drop constraint(:maintenance_requests, "maintenance_requests_equipment_id_fkey")

    alter table(:maintenance_requests) do
      modify :equipment_id, :uuid
    end

    drop table(:equipment)

    drop table(:maintenance_requests)

    drop table(:restaurants)
  end
end
